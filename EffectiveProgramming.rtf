{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red183\green250\blue154;\red255\green235\blue127;\red253\green173\blue144;
\red242\green183\blue251;\red171\green215\blue252;\red254\green207\blue137;}
{\*\expandedcolortbl;;\cssrgb\c76078\c97255\c66667;\cssrgb\c100000\c92941\c56863;\cssrgb\c100000\c73725\c63137;
\cssrgb\c96471\c78039\c98824;\cssrgb\c72157\c87451\c99216;\cssrgb\c100000\c84314\c60392;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Page 5\
\
\cb2 Honestly, I\'92d prefer that people spend their time discovering what problems they love and find interesting, first, and researching the hell out of those problems. \cb1 \
\
\cb3 The toughest thing in life is not learning a bunch of potentially hypothetically useful stuff, but figuring out\'a0what the heck it is you want to do. \cb1 \
\
\cb4 shamelessly following your joy\cb1 \
\
Page 11\
\
\cb2 Communication is just plain hard, particularly written communication. How exactly do you get better at something you self-selected out of?\'a0Blogging is one way:\cb1 \
\
\cb3 People spend their entire lives learning how to write effectively. It isn\'92t something you can fake. It isn\'92t something you can buy. You have to work at it.\cb1 \
\
\cb3 It\'92s exercise. No matter how out of shape you are, if you exercise a few times a week, you\'92re bound to get fitter. Write a small blog entry a few times every week and you\'92re bound to become a better writer.\cb1 \
\
\cb5 If you\'92re not writing because you\'92re intimidated by writing, well, you\'92re likely to stay that way forever.\cb1 \
\
\cb2 The difference between a tolerable programmer and a great programmer is not how many programming languages they know, and it\'92s not whether they prefer Python or Java. It\'92s whether they can communicate their ideas.\'a0By persuading other people, they get leverage. By writing clear comments and technical specs, they let other programmers understand their code, which means other programmers can use and work with their code instead of rewriting it. Absent this, their code is worthless.\cb1 \
\
quote from Joel Spolsky  ( SO co-founder )\
\
Know Language\
Know Language WithPeople \
\
\'97 People \
\'97 Communicate :: Speaking | Writing\
\
Page 19\
\
\cb6 Sharpening the saw is shorthand for anything you do that isn\'92t programming, necessarily, but (theoretically) makes you a better programmer.\cb1 \
\
\cb2 Of course, the best way to improve at something is to\'a0do it as often as possible.\cb1 \
\
\cb3 But if you\'92re so heads down in coding that you have no time for discussion, introspection or study, you aren\'92t really moving forward.\cb1 \
\
\cb7 You have to strike a mindful balance between practicing your craft and thinking about how you practice your craft.\cb1 \
\
Page 29\
\
\cb2 It\'92s frustrating to repeatedly bang your head against difficult, obscure bugs, but don\'92t let desperation lead you astray. An essential part of\'a0being a humble programmer\'a0is realizing that whenever there\'92s a problem with the code you\'92ve written, it\'92s always your fault. \cb1 \
\
Page 32\
\
\cb3 to recognize that every decision we make is a trade-off.\cb1 \
\
\cb2 To be a master programmer is to understand the nature of these trade-offs, and be conscious of them in everything we write.\cb1 \
\
Page 33\
\
\cb2 Start with brevity. Increase the other dimensions as required by testing\cb1 \
\
Page 36\
\
\cb2 You should always write your code as if comments didn\'92t exist.\'a0This\'a0forces\'a0you to write your code in the simplest, plainest, most self-documenting way you can humanly come up with.\cb1 \
\
Here\'92s the examples taken by author \
\
!st   ->    no comment, just plain code \
2nd  ->   with comment, but could be better\
3rd   ->   conv \'91comments\'92 as func name!\
\
\
\cb2 In the old days, seeing too much code at once quite frankly exceeded my complexity threshold, and when I had to work with it I\'92d typically try to rewrite it or at least comment it heavily. Today, however, I just slog through it without complaining (much). When I have a specific goal in mind and a complicated piece of code to write, I spend my time making it happen rather than telling myself stories about it [in comments].\cb1 \
\
Lots of stuff to digest.\
Great advice indeed :D \
\
\cb3 Junior developers rely on comments to tell the story when they should be relying on the\'a0code\'a0to tell the story. \cb1 \
\
\cb7 Comments are narrative asides; important in their own way, but in no way meant to replace plot, characterization, and setting.\cb1 \
\
\cb3 if your feel your code is too complex to understand\'a0without\'a0comments,\'a0\cb1 \
\
Page 37\
\
\cb3 your code is probably just bad.\'a0Rewrite it until it doesn\'92t need comments any more.\cb1 \
\
\cb2 If, at the end of that effort, you still feel comments are necessary, then by all means, add comments. Carefully.\cb1 \
\
Page 38\
\
\cb7 Even if \'93view source\'94 isn\'92t built in (but it totally should be), you should demand access to the underlying source code for your stack.\cb1 \
\
\cb3 No matter what the documentation says, the source code is the ultimate truth, the best and most definitive and up-to-date documentation you\'92re likely to find.\cb1 \
\
\'93I encourage developers to git clone anything and everything they depend on.\'94\
\
\cb2 This will be true forever, so the sooner you come to terms with this, the better off you\'92ll be as a software developer.\cb1 \
\
Page 39\
\
\cb2 I encourage developers to git clone anything and everything they depend on. Initially, they are all afraid. \'93That project is too big, I\'92ll never find it!\'94 or \'93I\'92m not smart enough to understand it\'94 or \'93That code is so ugly! I can\'92t stand to look at it\'94. But you don\'92t have to search the whole thing, you just need to follow the trail. \cb1 \
\
\cb5 And if you can\'92t understand the platform below you, how can you understand your own software? \cb1 \
\
\cb3 And most of the time, what inexperienced developers consider beautiful is superficial, and what they consider ugly, is battle-hardened production-ready code from master hackers.\cb1 \
\
Page 40\
\
\cb2 read other people\'92s code\'a0because we have to understand it to get things done. So don\'92t be afraid to read the source, Luke\'a0\'97 and follow it wherever it takes you, no matter how scary looking that code is.\cb1 \
\
Page 43\
\
\cb2 Sometimes asking the right question seems like half the problem.\cb1 \
\
Yep.\
Sometime it occurs to me as well :P\
\
}