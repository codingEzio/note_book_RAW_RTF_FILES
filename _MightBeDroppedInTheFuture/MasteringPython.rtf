{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red254\green201\blue9;\red171\green215\blue252;\red183\green250\blue154;
}
{\*\expandedcolortbl;;\cspthree\c97123\c82640\c27895;\cspthree\c75180\c86993\c98050;\cspthree\c80392\c96643\c69669;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Page 192\
\
\cb2 synchronous coroutines\cb1 \
\
It (might) be an alias for 'functions'. \
( Go check some expls on StackOverflow )\
\
Synchronous func might stall.\
Asynchronous not.\
\
\cb2 asyncore, gevent, and eventlet\cb1 \
\
Now we got 'asyncio'.\
\
(But those third-party libs still .. usable? )\
\
Page 193\
\
\cb2 \'b0 async def \'b0 async for \'b0 async with \'b0 await\cb1 \
\
New syntax ( starting at v3.5? ) \
\
\cb2 asyncio library was introduced only in Python 3.4\cb1 \
\
That means u gotta do some polyfills (I think).\
\
Page 194\
\
\cb2 For the traditional Python 3.4 usage\cb1 \
\
async def => @asyncio.coroutine \\n def ...\
\
                 yield from \
while True: yield from coroutine() \
\
Page 195\
\
\cb2 async def sleeper(): await asyncio.sleep(1)\cb1 \
\
@deco      =>  async def \
yield from  =>  await \
\
\cb2 The yield from statement originated from the original coroutines implementation in Python and was a logical extension from the yield statement used within synchronous coroutines.\cb1 \
\
yield => yield from => await \
\
[0] the 'yield from' syntax itself is a logical extension of 'yield' \
[1] the implementation of 'yield from' was originated from the original one (bulit-in-long-ago)\
[2] 'await' is (just) a wrapper of 'yield from' (very-advanced)\
[3] 'await' got some (buttXD) checks.  \
    [3.1] is it 'async/await' ?\
    [3.2] 'async def' / @deco / __await__  (one of them)\
[4] in short, it's (kinda) the same thing, don't get overwhelming ..\
\
\cb3 convert to the new syntax, make the following changes:\cb1 \
\
[AS BOOKMARK]\
\
Page 196\
\
\cb4 arallel processing\cb1 \
\
x - x - x \
\
x \
x \
x \
\
}